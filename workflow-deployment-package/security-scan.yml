
name: 🛡️ Advanced Security Scanning

on:
  push:
    branches: [ main, ops-readiness, develop ]
  pull_request:
    branches: [ main, ops-readiness ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - dependency-only
        - secrets-only

env:
  SECURITY_SCAN_TIMEOUT: 1800

jobs:
  vulnerability-scan:
    name: 🔍 Vulnerability Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      matrix:
        scanner: [trivy, snyk, safety]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        if: matrix.scanner == 'safety'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔍 Trivy Vulnerability Scanner
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 🔍 Snyk Security Scanner
        if: matrix.scanner == 'snyk'
        uses: snyk/actions/setup@master

      - name: 🐍 Snyk Python Scan
        if: matrix.scanner == 'snyk'
        run: |
          if [ -f requirements.txt ]; then
            snyk test --file=requirements.txt --json > snyk-results.json || true
            snyk code test --json > snyk-code-results.json || true
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: 🛡️ Safety Dependency Scanner
        if: matrix.scanner == 'safety'
        run: |
          pip install safety
          if [ -f requirements.txt ]; then
            safety check --json --output safety-results.json || true
          fi

      - name: 📤 Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: matrix.scanner == 'trivy' && always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 📊 Upload Scan Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-${{ matrix.scanner }}
          path: |
            *-results.json
            *-results.sarif
          retention-days: 30

  secrets-detection:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'dependency-only'
    strategy:
      matrix:
        tool: [trufflehog, gitleaks, detect-secrets]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🕵️ TruffleHog Secrets Scanner
        if: matrix.tool == 'trufflehog'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json --output trufflehog-results.json

      - name: 🔍 GitLeaks Secrets Scanner
        if: matrix.tool == 'gitleaks'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python for detect-secrets
        if: matrix.tool == 'detect-secrets'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔍 Detect-Secrets Scanner
        if: matrix.tool == 'detect-secrets'
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline || true
          detect-secrets audit .secrets.baseline || true

      - name: 📊 Upload Secrets Scan Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: secrets-scan-${{ matrix.tool }}
          path: |
            *-results.json
            .secrets.baseline
          retention-days: 30

  container-security:
    name: 🐳 Container Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Dockerfile Security Scan
        run: |
          if [ -f Dockerfile ]; then
            echo "🔍 Scanning Dockerfile for security issues..."
            # Install hadolint
            wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
            chmod +x hadolint
            ./hadolint Dockerfile --format json > dockerfile-scan.json || true
            echo "✅ Dockerfile scan completed"
          else
            echo "ℹ️ No Dockerfile found"
          fi

      - name: 🐳 Docker Image Security Scan
        run: |
          if [ -f Dockerfile ]; then
            echo "🐳 Building and scanning Docker image..."
            docker build -t security-scan-image .
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $PWD:/tmp aquasec/trivy image security-scan-image \
              --format json --output /tmp/docker-image-scan.json
            echo "✅ Docker image scan completed"
          fi

      - name: 📊 Upload Container Scan Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-scan
          path: |
            dockerfile-scan.json
            docker-image-scan.json
          retention-days: 30

  infrastructure-security:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    strategy:
      matrix:
        tool: [checkov, terrascan, tfsec]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Checkov IaC Security Scanner
        if: matrix.tool == 'checkov'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,dockerfile,kubernetes,github_actions,secrets
          output_format: json
          output_file_path: checkov-results.json
          quiet: true

      - name: 🛡️ Terrascan IaC Security Scanner
        if: matrix.tool == 'terrascan'
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'all'
          policy_type: 'all'
          only_warn: true
          sarif_upload: false
          non_recursive: false

      - name: 🔒 TFSec Terraform Security Scanner
        if: matrix.tool == 'tfsec' && hashFiles('**/*.tf') != ''
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          format: json
          soft_fail: true

      - name: 📊 Upload IaC Scan Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: iac-security-scan-${{ matrix.tool }}
          path: |
            checkov-results.json
            terrascan-results.json
            tfsec-results.json
          retention-days: 30

  dependency-analysis:
    name: 📦 Dependency Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'secrets-only'
    strategy:
      matrix:
        ecosystem: [python, javascript, docker]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Python Dependency Analysis
        if: matrix.ecosystem == 'python' && hashFiles('**/requirements*.txt', '**/Pipfile', '**/pyproject.toml') != ''
        run: |
          echo "🐍 Analyzing Python dependencies..."
          pip install pip-audit safety
          
          # pip-audit scan
          if [ -f requirements.txt ]; then
            pip-audit --requirement requirements.txt --format json --output pip-audit-results.json || true
          fi
          
          # Safety scan
          if [ -f requirements.txt ]; then
            safety check --json --output safety-results.json || true
          fi
          
          echo "✅ Python dependency analysis completed"

      - name: 📦 JavaScript Dependency Analysis
        if: matrix.ecosystem == 'javascript' && hashFiles('**/package.json', '**/yarn.lock', '**/package-lock.json') != ''
        run: |
          echo "📦 Analyzing JavaScript dependencies..."
          if [ -f package.json ]; then
            npm audit --json > npm-audit-results.json || true
            # Install and run retire.js
            npm install -g retire
            retire --js --json --outputpath retire-results.json || true
          fi
          echo "✅ JavaScript dependency analysis completed"

      - name: 🐳 Docker Dependency Analysis
        if: matrix.ecosystem == 'docker' && hashFiles('**/Dockerfile') != ''
        run: |
          echo "🐳 Analyzing Docker dependencies..."
          if [ -f Dockerfile ]; then
            # Analyze base images and dependencies
            docker run --rm -v $PWD:/tmp aquasec/trivy fs /tmp \
              --format json --output docker-deps-scan.json || true
          fi
          echo "✅ Docker dependency analysis completed"

      - name: 📊 Upload Dependency Analysis Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-analysis-${{ matrix.ecosystem }}
          path: |
            pip-audit-results.json
            safety-results.json
            npm-audit-results.json
            retire-results.json
            docker-deps-scan.json
          retention-days: 30

  compliance-scan:
    name: ⚖️ Compliance Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 GDPR Compliance Scan
        run: |
          echo "🔍 Scanning for GDPR compliance issues..."
          # Check for personal data handling patterns
          grep -r -i "personal.*data\|pii\|gdpr\|data.*subject" . \
            --exclude-dir=.git --include="*.py" --include="*.js" --include="*.md" \
            > gdpr-scan-results.txt || true
          echo "✅ GDPR compliance scan completed"

      - name: 🏢 SOC2 Compliance Scan
        run: |
          echo "🏢 Scanning for SOC2 compliance requirements..."
          # Check for security controls and logging
          grep -r -i "audit\|log\|security.*control\|access.*control" . \
            --exclude-dir=.git --include="*.py" --include="*.js" --include="*.md" \
            > soc2-scan-results.txt || true
          echo "✅ SOC2 compliance scan completed"

      - name: 💳 PCI DSS Compliance Scan
        run: |
          echo "💳 Scanning for PCI DSS compliance requirements..."
          # Check for payment data handling
          grep -r -i "payment\|credit.*card\|cardholder\|pci" . \
            --exclude-dir=.git --include="*.py" --include="*.js" --include="*.md" \
            > pci-scan-results.txt || true
          echo "✅ PCI DSS compliance scan completed"

      - name: 📊 Upload Compliance Scan Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-scan-results
          path: |
            gdpr-scan-results.txt
            soc2-scan-results.txt
            pci-scan-results.txt
          retention-days: 30

  security-report:
    name: 📊 Security Report Generation
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, secrets-detection, container-security, infrastructure-security, dependency-analysis, compliance-scan]
    if: always()
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download All Scan Results
        uses: actions/download-artifact@v3
        with:
          path: security-results/

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📊 Generate Security Report
        run: |
          echo "📊 Generating comprehensive security report..."
          
          cat > security_report.md << 'EOF'
          # 🛡️ Security Scan Report
          
          **Scan Date:** $(date)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## 📋 Executive Summary
          
          This report provides a comprehensive overview of security findings from multiple scanning tools.
          
          ## 🔍 Vulnerability Scanning Results
          
          ### Trivy Scanner
          - **Status:** ${{ needs.vulnerability-scan.result }}
          - **Critical Issues:** TBD
          - **High Issues:** TBD
          - **Medium Issues:** TBD
          
          ### Snyk Scanner
          - **Status:** ${{ needs.vulnerability-scan.result }}
          - **Vulnerabilities Found:** TBD
          - **License Issues:** TBD
          
          ## 🔐 Secrets Detection Results
          
          ### TruffleHog
          - **Status:** ${{ needs.secrets-detection.result }}
          - **Verified Secrets:** TBD
          - **Potential Secrets:** TBD
          
          ### GitLeaks
          - **Status:** ${{ needs.secrets-detection.result }}
          - **Secrets Found:** TBD
          
          ## 🐳 Container Security Results
          
          - **Status:** ${{ needs.container-security.result }}
          - **Dockerfile Issues:** TBD
          - **Image Vulnerabilities:** TBD
          
          ## 🏗️ Infrastructure Security Results
          
          - **Status:** ${{ needs.infrastructure-security.result }}
          - **IaC Issues:** TBD
          - **Configuration Problems:** TBD
          
          ## 📦 Dependency Analysis Results
          
          - **Status:** ${{ needs.dependency-analysis.result }}
          - **Vulnerable Dependencies:** TBD
          - **Outdated Packages:** TBD
          
          ## ⚖️ Compliance Scan Results
          
          - **Status:** ${{ needs.compliance-scan.result }}
          - **GDPR Issues:** TBD
          - **SOC2 Issues:** TBD
          - **PCI DSS Issues:** TBD
          
          ## 🎯 Recommendations
          
          1. **High Priority:** Address all critical and high-severity vulnerabilities
          2. **Medium Priority:** Update outdated dependencies
          3. **Low Priority:** Review and fix medium-severity issues
          
          ## 📈 Trend Analysis
          
          - **Previous Scan:** N/A
          - **Issues Resolved:** N/A
          - **New Issues:** N/A
          
          ---
          
          *Report generated automatically by GitHub Actions*
          EOF
          
          echo "✅ Security report generated"

      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-security-report
          path: |
            security_report.md
            security-results/
          retention-days: 90

      - name: 📢 Security Summary
        run: |
          echo "🛡️ Security Scan Summary:"
          echo "🔍 Vulnerability Scan: ${{ needs.vulnerability-scan.result }}"
          echo "🔐 Secrets Detection: ${{ needs.secrets-detection.result }}"
          echo "🐳 Container Security: ${{ needs.container-security.result }}"
          echo "🏗️ Infrastructure Security: ${{ needs.infrastructure-security.result }}"
          echo "📦 Dependency Analysis: ${{ needs.dependency-analysis.result }}"
          echo "⚖️ Compliance Scan: ${{ needs.compliance-scan.result }}"
