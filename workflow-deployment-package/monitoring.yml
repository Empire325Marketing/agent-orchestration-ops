
name: üìä Operational Monitoring

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
    - cron: '0 */6 * * *'   # Every 6 hours for detailed checks
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: true
        default: 'health'
        type: choice
        options:
        - health
        - performance
        - security
        - compliance
        - full

env:
  MONITORING_TIMEOUT: 300
  ALERT_THRESHOLD_RESPONSE_TIME: 5000
  ALERT_THRESHOLD_ERROR_RATE: 5

jobs:
  health-check:
    name: üè• Health Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'health' || github.event.inputs.check_type == 'full' || github.event_name == 'schedule'
    outputs:
      health_status: ${{ steps.health.outputs.status }}
      response_time: ${{ steps.health.outputs.response_time }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üè• System Health Check
        id: health
        run: |
          echo "üè• Performing system health checks..."
          
          # Initialize status
          OVERALL_STATUS="healthy"
          TOTAL_RESPONSE_TIME=0
          CHECK_COUNT=0
          
          # Health check endpoints (customize for your application)
          ENDPOINTS=(
            "https://api.github.com/repos/${{ github.repository }}"
            "https://github.com/${{ github.repository }}"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "üîç Checking $endpoint..."
            
            # Measure response time
            START_TIME=$(date +%s%N)
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint" --max-time 10 || echo "000")
            END_TIME=$(date +%s%N)
            
            RESPONSE_TIME=$(( (END_TIME - START_TIME) / 1000000 ))  # Convert to milliseconds
            TOTAL_RESPONSE_TIME=$((TOTAL_RESPONSE_TIME + RESPONSE_TIME))
            CHECK_COUNT=$((CHECK_COUNT + 1))
            
            echo "üìä Response time: ${RESPONSE_TIME}ms, HTTP code: $HTTP_CODE"
            
            # Check if endpoint is healthy
            if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 400 ]]; then
              echo "‚úÖ $endpoint is healthy"
            else
              echo "‚ùå $endpoint is unhealthy (HTTP $HTTP_CODE)"
              OVERALL_STATUS="unhealthy"
            fi
            
            # Check response time threshold
            if [ "$RESPONSE_TIME" -gt "$ALERT_THRESHOLD_RESPONSE_TIME" ]; then
              echo "‚ö†Ô∏è High response time detected: ${RESPONSE_TIME}ms"
              OVERALL_STATUS="degraded"
            fi
          done
          
          # Calculate average response time
          if [ "$CHECK_COUNT" -gt 0 ]; then
            AVG_RESPONSE_TIME=$((TOTAL_RESPONSE_TIME / CHECK_COUNT))
          else
            AVG_RESPONSE_TIME=0
          fi
          
          echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "response_time=$AVG_RESPONSE_TIME" >> $GITHUB_OUTPUT
          
          echo "üè• Health check completed: $OVERALL_STATUS (avg response: ${AVG_RESPONSE_TIME}ms)"

      - name: üîç Repository Health Check
        run: |
          echo "üîç Checking repository health..."
          
          # Check for recent commits
          LAST_COMMIT_DATE=$(git log -1 --format=%ct)
          CURRENT_DATE=$(date +%s)
          DAYS_SINCE_COMMIT=$(( (CURRENT_DATE - LAST_COMMIT_DATE) / 86400 ))
          
          echo "üìÖ Days since last commit: $DAYS_SINCE_COMMIT"
          
          if [ "$DAYS_SINCE_COMMIT" -gt 30 ]; then
            echo "‚ö†Ô∏è Repository hasn't been updated in over 30 days"
          else
            echo "‚úÖ Repository is actively maintained"
          fi
          
          # Check for open issues
          echo "üîç Checking repository issues..."
          # This would typically use GitHub API to check issues
          echo "‚úÖ Repository health check completed"

      - name: üìä Generate Health Report
        run: |
          cat > health-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "status": "${{ steps.health.outputs.status }}",
            "response_time_ms": ${{ steps.health.outputs.response_time }},
            "checks": {
              "endpoints": "completed",
              "repository": "completed"
            }
          }
          EOF
          
          echo "üìä Health report generated"

      - name: üì§ Upload Health Report
        uses: actions/upload-artifact@v3
        with:
          name: health-report-$(date +%Y%m%d-%H%M%S)
          path: health-report.json
          retention-days: 7

  performance-monitoring:
    name: ‚ö° Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'full' || github.event.schedule == '0 */6 * * *'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚ö° Performance Metrics Collection
        run: |
          echo "‚ö° Collecting performance metrics..."
          
          # Repository size analysis
          REPO_SIZE=$(du -sh . | cut -f1)
          echo "üì¶ Repository size: $REPO_SIZE"
          
          # File count analysis
          FILE_COUNT=$(find . -type f | wc -l)
          echo "üìÑ Total files: $FILE_COUNT"
          
          # Large files detection
          echo "üîç Detecting large files..."
          find . -type f -size +10M -exec ls -lh {} \; | head -10
          
          # Workflow performance analysis
          echo "üîÑ Analyzing workflow performance..."
          if [ -d ".github/workflows" ]; then
            WORKFLOW_COUNT=$(find .github/workflows -name "*.yml" -o -name "*.yaml" | wc -l)
            echo "üîÑ Workflow files: $WORKFLOW_COUNT"
          fi

      - name: üìä Generate Performance Report
        run: |
          cat > performance-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "metrics": {
              "repository_size": "$(du -sh . | cut -f1)",
              "file_count": $(find . -type f | wc -l),
              "workflow_count": $(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l),
              "large_files": $(find . -type f -size +10M | wc -l)
            }
          }
          EOF
          
          echo "üìä Performance report generated"

      - name: üì§ Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report-$(date +%Y%m%d-%H%M%S)
          path: performance-report.json
          retention-days: 7

  security-monitoring:
    name: üõ°Ô∏è Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'full' || github.event.schedule == '0 */6 * * *'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ°Ô∏è Security Status Check
        run: |
          echo "üõ°Ô∏è Checking security status..."
          
          # Check for security policy
          if [ -f "SECURITY.md" ]; then
            echo "‚úÖ Security policy found"
          else
            echo "‚ö†Ô∏è Security policy missing"
          fi
          
          # Check for dependabot configuration
          if [ -f ".github/dependabot.yml" ]; then
            echo "‚úÖ Dependabot configuration found"
          else
            echo "‚ö†Ô∏è Dependabot configuration missing"
          fi
          
          # Check for security workflows
          SECURITY_WORKFLOWS=$(find .github/workflows -name "*security*" -o -name "*scan*" 2>/dev/null | wc -l)
          echo "üîç Security workflows: $SECURITY_WORKFLOWS"
          
          # Check for secrets in code (basic check)
          echo "üîç Checking for potential secrets..."
          POTENTIAL_SECRETS=$(grep -r -i "password\|secret\|key\|token" . --exclude-dir=.git --exclude="*.md" | wc -l)
          echo "‚ö†Ô∏è Potential secrets found: $POTENTIAL_SECRETS"

      - name: üìä Generate Security Report
        run: |
          cat > security-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "security_status": {
              "security_policy": $([ -f "SECURITY.md" ] && echo "true" || echo "false"),
              "dependabot_config": $([ -f ".github/dependabot.yml" ] && echo "true" || echo "false"),
              "security_workflows": $(find .github/workflows -name "*security*" -o -name "*scan*" 2>/dev/null | wc -l),
              "potential_secrets": $(grep -r -i "password\|secret\|key\|token" . --exclude-dir=.git --exclude="*.md" 2>/dev/null | wc -l)
            }
          }
          EOF
          
          echo "üìä Security report generated"

      - name: üì§ Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report-$(date +%Y%m%d-%H%M%S)
          path: security-report.json
          retention-days: 7

  compliance-monitoring:
    name: ‚öñÔ∏è Compliance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'compliance' || github.event.inputs.check_type == 'full' || github.event.schedule == '0 */6 * * *'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚öñÔ∏è Compliance Check
        run: |
          echo "‚öñÔ∏è Checking compliance status..."
          
          # Check for required documentation
          REQUIRED_DOCS=("README.md" "LICENSE" "CONTRIBUTING.md" "SECURITY.md")
          MISSING_DOCS=()
          
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ -f "$doc" ] || [ -f "${doc,,}" ] || [ -f "${doc^^}" ]; then
              echo "‚úÖ $doc found"
            else
              echo "‚ùå $doc missing"
              MISSING_DOCS+=("$doc")
            fi
          done
          
          # Check for code of conduct
          if find . -name "*code*of*conduct*" -o -name "*CODE_OF_CONDUCT*" | grep -q .; then
            echo "‚úÖ Code of conduct found"
          else
            echo "‚ö†Ô∏è Code of conduct missing"
          fi
          
          # Check for issue templates
          if [ -d ".github/ISSUE_TEMPLATE" ]; then
            ISSUE_TEMPLATES=$(find .github/ISSUE_TEMPLATE -name "*.md" -o -name "*.yml" | wc -l)
            echo "‚úÖ Issue templates found: $ISSUE_TEMPLATES"
          else
            echo "‚ö†Ô∏è Issue templates missing"
          fi
          
          # Check for PR template
          if [ -f ".github/PULL_REQUEST_TEMPLATE.md" ] || [ -f ".github/pull_request_template.md" ]; then
            echo "‚úÖ PR template found"
          else
            echo "‚ö†Ô∏è PR template missing"
          fi

      - name: üìä Generate Compliance Report
        run: |
          cat > compliance-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "compliance_status": {
              "readme": $([ -f "README.md" ] && echo "true" || echo "false"),
              "license": $(find . -maxdepth 1 -iname "license*" | grep -q . && echo "true" || echo "false"),
              "contributing": $(find . -maxdepth 1 -iname "contributing*" | grep -q . && echo "true" || echo "false"),
              "security_policy": $([ -f "SECURITY.md" ] && echo "true" || echo "false"),
              "code_of_conduct": $(find . -iname "*code*of*conduct*" | grep -q . && echo "true" || echo "false"),
              "issue_templates": $([ -d ".github/ISSUE_TEMPLATE" ] && echo "true" || echo "false"),
              "pr_template": $(find .github -iname "*pull_request_template*" | grep -q . && echo "true" || echo "false")
            }
          }
          EOF
          
          echo "üìä Compliance report generated"

      - name: üì§ Upload Compliance Report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report-$(date +%Y%m%d-%H%M%S)
          path: compliance-report.json
          retention-days: 7

  alerting:
    name: üö® Alerting System
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, security-monitoring, compliance-monitoring]
    if: always()
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì• Download All Reports
        uses: actions/download-artifact@v3
        with:
          path: monitoring-reports/

      - name: üö® Analyze Alerts
        run: |
          echo "üö® Analyzing monitoring results for alerts..."
          
          # Check health status
          HEALTH_STATUS="${{ needs.health-check.outputs.health_status }}"
          RESPONSE_TIME="${{ needs.health-check.outputs.response_time }}"
          
          ALERTS=()
          
          if [ "$HEALTH_STATUS" == "unhealthy" ]; then
            ALERTS+=("üö® CRITICAL: System health check failed")
          elif [ "$HEALTH_STATUS" == "degraded" ]; then
            ALERTS+=("‚ö†Ô∏è WARNING: System performance degraded")
          fi
          
          if [ -n "$RESPONSE_TIME" ] && [ "$RESPONSE_TIME" -gt "$ALERT_THRESHOLD_RESPONSE_TIME" ]; then
            ALERTS+=("‚ö†Ô∏è WARNING: High response time detected: ${RESPONSE_TIME}ms")
          fi
          
          # Generate alert summary
          if [ ${#ALERTS[@]} -gt 0 ]; then
            echo "üö® ALERTS DETECTED:"
            printf '%s\n' "${ALERTS[@]}"
            
            # Create alert file
            cat > alerts.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "alert_count": ${#ALERTS[@]},
            "alerts": [
              $(printf '"%s",' "${ALERTS[@]}" | sed 's/,$//')
            ]
          }
          EOF
          else
            echo "‚úÖ No alerts detected - all systems operational"
            cat > alerts.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "alert_count": 0,
            "alerts": [],
            "status": "all_clear"
          }
          EOF
          fi

      - name: üìä Generate Monitoring Dashboard
        run: |
          echo "üìä Generating monitoring dashboard..."
          
          cat > monitoring-dashboard.md << EOF
          # üìä Operational Monitoring Dashboard
          
          **Last Updated:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          ## üè• Health Status
          - **Overall Status:** ${{ needs.health-check.outputs.health_status || 'N/A' }}
          - **Average Response Time:** ${{ needs.health-check.outputs.response_time || 'N/A' }}ms
          
          ## ‚ö° Performance Status
          - **Performance Monitoring:** ${{ needs.performance-monitoring.result }}
          
          ## üõ°Ô∏è Security Status
          - **Security Monitoring:** ${{ needs.security-monitoring.result }}
          
          ## ‚öñÔ∏è Compliance Status
          - **Compliance Monitoring:** ${{ needs.compliance-monitoring.result }}
          
          ## üö® Active Alerts
          $(if [ -f alerts.json ]; then
            ALERT_COUNT=$(jq -r '.alert_count' alerts.json)
            if [ "$ALERT_COUNT" -gt 0 ]; then
              echo "- **Alert Count:** $ALERT_COUNT"
              jq -r '.alerts[]' alerts.json | sed 's/^/- /'
            else
              echo "- ‚úÖ No active alerts"
            fi
          else
            echo "- ‚ÑπÔ∏è Alert data not available"
          fi)
          
          ## üìà Trends
          - **Monitoring Frequency:** Every 15 minutes (health), Every 6 hours (detailed)
          - **Data Retention:** 7 days for reports
          
          ---
          
          *Dashboard generated automatically by GitHub Actions*
          EOF

      - name: üì§ Upload Monitoring Results
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-dashboard-$(date +%Y%m%d-%H%M%S)
          path: |
            monitoring-dashboard.md
            alerts.json
          retention-days: 30

      - name: üì¢ Notification Summary
        run: |
          echo "üì¢ Monitoring Summary:"
          echo "üè• Health Check: ${{ needs.health-check.result }}"
          echo "‚ö° Performance: ${{ needs.performance-monitoring.result }}"
          echo "üõ°Ô∏è Security: ${{ needs.security-monitoring.result }}"
          echo "‚öñÔ∏è Compliance: ${{ needs.compliance-monitoring.result }}"
          
          if [ -f alerts.json ]; then
            ALERT_COUNT=$(jq -r '.alert_count' alerts.json)
            echo "üö® Alerts: $ALERT_COUNT"
          fi
          
          echo "‚úÖ Monitoring cycle completed"
