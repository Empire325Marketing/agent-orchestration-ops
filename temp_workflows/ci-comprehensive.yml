
name: 🔄 Comprehensive CI Pipeline

on:
  push:
    branches: [ main, ops-readiness, develop ]
  pull_request:
    branches: [ main, ops-readiness ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'

jobs:
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secret scanning with GitLeaks
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Python code formatting check
        run: |
          black --check --diff .
          isort --check-only --diff .

      - name: Python linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Python type checking
        run: mypy . --ignore-missing-imports || true

      - name: Python security analysis
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: JavaScript/TypeScript quality
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run lint || true
            npm run test || true
          fi

      - name: Go code quality
        run: |
          if [ -f go.mod ]; then
            go fmt ./...
            go vet ./...
            go test -v ./... || true
          fi

      - name: Upload code quality artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  infrastructure-validation:
    name: 🏗️ Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: |
          if [ -d "terraform" ] || [ -d "infra" ] || [ -f "*.tf" ]; then
            terraform fmt -check -recursive . || true
          fi

      - name: Terraform Validation
        run: |
          if [ -d "terraform" ] || [ -d "infra" ] || [ -f "*.tf" ]; then
            find . -name "*.tf" -exec dirname {} \; | sort -u | while read dir; do
              echo "Validating $dir"
              cd "$dir"
              terraform init -backend=false
              terraform validate
              cd - > /dev/null
            done
          fi

      - name: Checkov Infrastructure Security
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,dockerfile,kubernetes,helm,arm,cloudformation
          output_format: sarif
          output_file_path: checkov-report.sarif
        continue-on-error: true

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-report.sarif

  container-security:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'docker') || contains(github.event.head_commit.message, 'container')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          if [ -f Dockerfile ]; then
            docker build -t test-image:latest .
          fi
          find . -name "Dockerfile*" -exec dirname {} \; | sort -u | while read dir; do
            if [ "$dir" != "." ]; then
              echo "Building image in $dir"
              docker build -t test-image-$(basename $dir):latest $dir
            fi
          done

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
        continue-on-error: true

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  compliance-check:
    name: 📋 Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          echo "Checking compliance requirements..."
          
          # Required documentation
          required_files=(
            "README.md"
            "SECURITY.md"
            "CONTRIBUTING.md"
            "CODE_OF_CONDUCT.md"
            "LICENSE"
            ".github/CODEOWNERS"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "❌ Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          else
            echo "✅ All required compliance files present"
          fi

      - name: Validate GitHub workflows
        run: |
          echo "Validating GitHub Actions workflows..."
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read workflow; do
            echo "Validating $workflow"
            # Basic YAML syntax check
            python -c "import yaml; yaml.safe_load(open('$workflow'))" || exit 1
          done
          echo "✅ All workflows are valid"

      - name: Check branch protection compliance
        run: |
          echo "Branch protection will be validated post-deployment"
          echo "✅ Compliance check completed"

  performance-baseline:
    name: ⚡ Performance Baseline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup performance testing tools
        run: |
          # Install basic performance testing tools
          sudo apt-get update
          sudo apt-get install -y apache2-utils curl jq

      - name: Repository metrics
        run: |
          echo "Repository Performance Metrics:"
          echo "================================"
          
          # File count and sizes
          echo "📁 Repository size analysis:"
          du -sh . || true
          find . -type f | wc -l | xargs echo "Total files:"
          
          # Large files detection
          echo "📊 Large files (>1MB):"
          find . -type f -size +1M -exec ls -lh {} \; | head -10 || true
          
          # Git repository health
          echo "🔍 Git repository health:"
          git count-objects -v || true
          
          echo "✅ Performance baseline established"

  notification:
    name: 📢 CI Status Notification
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, infrastructure-validation, compliance-check, performance-baseline]
    if: always()
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.infrastructure-validation.result }}" == "success" && 
                "${{ needs.compliance-check.result }}" == "success" && 
                "${{ needs.performance-baseline.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All CI checks passed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Some CI checks failed - review required" >> $GITHUB_OUTPUT
          fi

      - name: Create status summary
        run: |
          echo "## 🔄 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.infrastructure-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance | ${{ needs.compliance-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-baseline.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
