
name: 🚀 Production Deployment Pipeline

on:
  push:
    branches: [ main, ops-readiness ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deployment-validation:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    outputs:
      deploy-environment: ${{ steps.determine-env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/ops-readiness" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Validate deployment readiness
        id: validation
        run: |
          echo "Validating deployment readiness..."
          
          # Check if this is a force deployment
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "⚠️ Force deployment requested - skipping some validations"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Validate required files exist
          required_files=("README.md" "SECURITY.md")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required file missing: $file"
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          # Check for recent commits (avoid accidental deployments)
          LAST_COMMIT_TIME=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_COMMIT_TIME))
          
          if [[ $TIME_DIFF -lt 300 ]]; then  # Less than 5 minutes
            echo "⚠️ Recent commit detected (${TIME_DIFF}s ago) - proceeding with caution"
          fi
          
          echo "✅ Deployment validation passed"
          echo "should-deploy=true" >> $GITHUB_OUTPUT

  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should-deploy == 'true'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add your integration test commands here
          echo "✅ Integration tests completed"

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json
        continue-on-error: true

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
        continue-on-error: true

  security-scan-deployment:
    name: 🔒 Deployment Security Scan
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-and-test]
    if: needs.pre-deployment-validation.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.version }}
          format: 'sarif'
          output: 'trivy-deployment-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-deployment-results.sarif'

  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-and-test, security-scan-deployment]
    if: needs.pre-deployment-validation.outputs.deploy-environment == 'staging' && needs.pre-deployment-validation.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - name: Deploy to staging
        run: |
          echo "🎭 Deploying to staging environment..."
          echo "Version: ${{ needs.pre-deployment-validation.outputs.version }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.version }}"
          
          # Add your staging deployment commands here
          # kubectl apply -f k8s/staging/
          # helm upgrade --install app-staging ./helm-chart --set image.tag=${{ needs.pre-deployment-validation.outputs.version }}
          
          echo "✅ Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add your smoke test commands here
          # curl -f https://staging.example.com/health
          echo "✅ Smoke tests passed"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-and-test, security-scan-deployment]
    if: needs.pre-deployment-validation.outputs.deploy-environment == 'production' && needs.pre-deployment-validation.outputs.should-deploy == 'true'
    environment:
      name: production
      url: https://production.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-production health check
        run: |
          echo "🏥 Running pre-production health checks..."
          # Add your health check commands here
          echo "✅ Health checks passed"

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Version: ${{ needs.pre-deployment-validation.outputs.version }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.version }}"
          
          # Add your production deployment commands here
          # kubectl apply -f k8s/production/
          # helm upgrade --install app-production ./helm-chart --set image.tag=${{ needs.pre-deployment-validation.outputs.version }}
          
          echo "✅ Production deployment completed"

      - name: Post-deployment verification
        run: |
          echo "🔍 Running post-deployment verification..."
          # Add your verification commands here
          # curl -f https://production.example.com/health
          # kubectl get pods -l app=your-app
          echo "✅ Post-deployment verification completed"

      - name: Create deployment record
        run: |
          echo "📝 Creating deployment record..."
          cat > deployment-record.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "version": "${{ needs.pre-deployment-validation.outputs.version }}",
            "environment": "production",
            "commit": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          echo "Deployment record created"

  rollback:
    name: 🔄 Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    environment:
      name: production
    steps:
      - name: Rollback deployment
        run: |
          echo "🔄 Initiating rollback procedure..."
          # Add your rollback commands here
          # kubectl rollout undo deployment/your-app
          # helm rollback app-production
          echo "⚠️ Rollback completed - please verify system status"

  post-deployment:
    name: 📊 Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Update monitoring dashboards
        run: |
          echo "📊 Updating monitoring dashboards..."
          # Add commands to update monitoring/alerting
          echo "✅ Monitoring updated"

      - name: Notify stakeholders
        run: |
          echo "📢 Notifying stakeholders of deployment..."
          # Add notification commands (Slack, email, etc.)
          echo "✅ Notifications sent"

      - name: Generate deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.pre-deployment-validation.outputs.deploy-environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-deployment-validation.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
