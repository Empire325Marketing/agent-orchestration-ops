
name: 🚀 Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  prepare-release:
    name: 📋 Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # Calculate next version based on release type
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Current version: $CURRENT_VERSION"
            
            # Remove 'v' prefix for calculation
            VERSION_NUMBER=${CURRENT_VERSION#v}
            IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUMBER"
            
            MAJOR=${VERSION_PARTS[0]:-0}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog for ${{ steps.version.outputs.version }}"
          
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Generate changelog
          CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          
          # Save changelog to file and output
          echo "$CHANGELOG" > CHANGELOG_TEMP.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.version }}

  build-release-artifacts:
    name: 🏗️ Build Release Artifacts
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  security-validation:
    name: 🔒 Release Security Validation
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release-artifacts]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan release artifacts
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Generate security attestation
        run: |
          echo "🔒 Generating security attestation for release"
          # Add security attestation logic

  create-github-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release-artifacts, security-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          release_name: Release ${{ needs.prepare-release.outputs.version }}
          body: |
            ## 🚀 Release ${{ needs.prepare-release.outputs.version }}
            
            ### 📝 What's Changed
            ${{ needs.prepare-release.outputs.changelog }}
            
            ### 🔒 Security
            - ✅ All security scans passed
            - ✅ Vulnerability assessment completed
            - ✅ Security attestation generated
            
            ### 📦 Artifacts
            - Docker Image: `ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}`
            - Platform Support: linux/amd64, linux/arm64
            
            ### 🔗 Links
            - [Documentation](https://docs.agent-orchestration-ops.com)
            - [Security Policy](./SECURITY.md)
            - [Contributing Guidelines](./CONTRIBUTING.md)
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  post-release:
    name: 📊 Post-release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    steps:
      - name: Update documentation
        run: |
          echo "📚 Updating release documentation"
          # Add documentation update logic

      - name: Notify stakeholders
        run: |
          echo "📢 Notifying stakeholders of release ${{ needs.prepare-release.outputs.version }}"
          # Add notification logic

      - name: Update monitoring
        run: |
          echo "📊 Updating monitoring for new release"
          # Add monitoring update logic

      - name: Trigger downstream deployments
        run: |
          echo "🚀 Triggering downstream deployments"
          # Add deployment trigger logic
