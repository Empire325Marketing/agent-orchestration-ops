
name: 🎯 Operational Excellence Framework

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
    - cron: '0 18 * * 5'  # Weekly on Friday at 6 PM UTC
  push:
    branches: [ main, ops-readiness ]
    paths:
      - '.github/workflows/**'
      - 'docs/**'
      - 'monitoring/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      assessment_type:
        description: 'Type of operational assessment'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - performance
          - reliability
          - cost-optimization
          - documentation

env:
  ASSESSMENT_RESULTS_PATH: 'operational-assessment-results'

jobs:
  operational-readiness-assessment:
    name: 🎯 Operational Readiness Assessment
    runs-on: ubuntu-latest
    if: github.event.inputs.assessment_type == 'full' || github.event.inputs.assessment_type == 'reliability' || github.event_name != 'workflow_dispatch'
    outputs:
      readiness-score: ${{ steps.assessment.outputs.readiness-score }}
      critical-issues: ${{ steps.assessment.outputs.critical-issues }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Operational readiness assessment
        id: assessment
        run: |
          echo "🎯 Running operational readiness assessment..."
          
          assessment_report="operational-readiness-report.md"
          echo "# 🎯 Operational Readiness Assessment" > $assessment_report
          echo "Generated: $(date)" >> $assessment_report
          echo "" >> $assessment_report
          
          # Initialize scoring
          total_score=0
          max_score=0
          critical_issues=0
          
          # 1. Documentation Assessment (20 points)
          echo "## 📚 Documentation Assessment" >> $assessment_report
          echo "" >> $assessment_report
          
          doc_score=0
          required_docs=("README.md" "CONTRIBUTING.md" "SECURITY.md" "CODE_OF_CONDUCT.md")
          
          for doc in "${required_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ $doc exists" >> $assessment_report
              ((doc_score+=5))
            else
              echo "❌ $doc missing" >> $assessment_report
              ((critical_issues++))
            fi
          done
          
          total_score=$((total_score + doc_score))
          max_score=$((max_score + 20))
          echo "**Documentation Score: $doc_score/20**" >> $assessment_report
          echo "" >> $assessment_report
          
          # 2. CI/CD Pipeline Assessment (25 points)
          echo "## 🔄 CI/CD Pipeline Assessment" >> $assessment_report
          echo "" >> $assessment_report
          
          cicd_score=0
          
          if [ -d ".github/workflows" ]; then
            workflow_count=$(find .github/workflows -name "*.yml" -o -name "*.yaml" | wc -l)
            if [ $workflow_count -ge 3 ]; then
              echo "✅ Multiple workflows configured ($workflow_count)" >> $assessment_report
              ((cicd_score+=10))
            elif [ $workflow_count -ge 1 ]; then
              echo "⚠️ Basic workflows present ($workflow_count)" >> $assessment_report
              ((cicd_score+=5))
            else
              echo "❌ No workflows found" >> $assessment_report
              ((critical_issues++))
            fi
            
            # Check for specific workflow types
            if find .github/workflows -name "*.yml" | xargs grep -l "test\|spec" | grep -q .; then
              echo "✅ Testing workflows present" >> $assessment_report
              ((cicd_score+=5))
            else
              echo "❌ Testing workflows missing" >> $assessment_report
            fi
            
            if find .github/workflows -name "*.yml" | xargs grep -l "security\|vulnerability" | grep -q .; then
              echo "✅ Security workflows present" >> $assessment_report
              ((cicd_score+=5))
            else
              echo "❌ Security workflows missing" >> $assessment_report
            fi
            
            if find .github/workflows -name "*.yml" | xargs grep -l "deploy\|release" | grep -q .; then
              echo "✅ Deployment workflows present" >> $assessment_report
              ((cicd_score+=5))
            else
              echo "❌ Deployment workflows missing" >> $assessment_report
            fi
          else
            echo "❌ No CI/CD workflows directory found" >> $assessment_report
            ((critical_issues++))
          fi
          
          total_score=$((total_score + cicd_score))
          max_score=$((max_score + 25))
          echo "**CI/CD Score: $cicd_score/25**" >> $assessment_report
          echo "" >> $assessment_report
          
          # 3. Security Posture Assessment (20 points)
          echo "## 🔒 Security Posture Assessment" >> $assessment_report
          echo "" >> $assessment_report
          
          security_score=0
          
          if [ -f "SECURITY.md" ]; then
            echo "✅ Security policy documented" >> $assessment_report
            ((security_score+=5))
          else
            echo "❌ Security policy missing" >> $assessment_report
          fi
          
          if [ -f ".github/CODEOWNERS" ]; then
            echo "✅ Code ownership defined" >> $assessment_report
            ((security_score+=5))
          else
            echo "❌ Code ownership missing" >> $assessment_report
          fi
          
          if find .github/workflows -name "*.yml" | xargs grep -l "security\|vulnerability\|scan" | grep -q .; then
            echo "✅ Security scanning automated" >> $assessment_report
            ((security_score+=10))
          else
            echo "❌ Security scanning not automated" >> $assessment_report
            ((critical_issues++))
          fi
          
          total_score=$((total_score + security_score))
          max_score=$((max_score + 20))
          echo "**Security Score: $security_score/20**" >> $assessment_report
          echo "" >> $assessment_report
          
          # 4. Monitoring & Observability (15 points)
          echo "## 📊 Monitoring & Observability Assessment" >> $assessment_report
          echo "" >> $assessment_report
          
          monitoring_score=0
          
          if find . -name "*.yml" -o -name "*.yaml" | xargs grep -l "monitoring\|metrics\|logging" | grep -q .; then
            echo "✅ Monitoring configuration present" >> $assessment_report
            ((monitoring_score+=5))
          else
            echo "❌ Monitoring configuration missing" >> $assessment_report
          fi
          
          if find .github/workflows -name "*.yml" | xargs grep -l "health\|status\|uptime" | grep -q .; then
            echo "✅ Health check workflows present" >> $assessment_report
            ((monitoring_score+=5))
          else
            echo "❌ Health check workflows missing" >> $assessment_report
          fi
          
          if find . -name "*.md" | xargs grep -l "dashboard\|grafana\|prometheus\|datadog" | grep -q .; then
            echo "✅ Monitoring tools documented" >> $assessment_report
            ((monitoring_score+=5))
          else
            echo "❌ Monitoring tools not documented" >> $assessment_report
          fi
          
          total_score=$((total_score + monitoring_score))
          max_score=$((max_score + 15))
          echo "**Monitoring Score: $monitoring_score/15**" >> $assessment_report
          echo "" >> $assessment_report
          
          # 5. Disaster Recovery & Business Continuity (20 points)
          echo "## 🚨 Disaster Recovery Assessment" >> $assessment_report
          echo "" >> $assessment_report
          
          dr_score=0
          
          if find . -name "*.md" | xargs grep -l "backup\|disaster\|recovery\|continuity" | grep -q .; then
            echo "✅ Disaster recovery procedures documented" >> $assessment_report
            ((dr_score+=10))
          else
            echo "❌ Disaster recovery procedures missing" >> $assessment_report
            ((critical_issues++))
          fi
          
          if find .github/workflows -name "*.yml" | xargs grep -l "backup\|restore" | grep -q .; then
            echo "✅ Automated backup workflows present" >> $assessment_report
            ((dr_score+=10))
          else
            echo "❌ Automated backup workflows missing" >> $assessment_report
          fi
          
          total_score=$((total_score + dr_score))
          max_score=$((max_score + 20))
          echo "**Disaster Recovery Score: $dr_score/20**" >> $assessment_report
          echo "" >> $assessment_report
          
          # Calculate final score
          readiness_percentage=$((total_score * 100 / max_score))
          
          echo "## 🏆 Overall Operational Readiness" >> $assessment_report
          echo "" >> $assessment_report
          echo "**Total Score: $total_score/$max_score ($readiness_percentage%)**" >> $assessment_report
          echo "**Critical Issues: $critical_issues**" >> $assessment_report
          echo "" >> $assessment_report
          
          if [ $readiness_percentage -ge 90 ]; then
            echo "🟢 **EXCELLENT** - Production ready with best practices" >> $assessment_report
          elif [ $readiness_percentage -ge 75 ]; then
            echo "🟡 **GOOD** - Production ready with minor improvements needed" >> $assessment_report
          elif [ $readiness_percentage -ge 60 ]; then
            echo "🟠 **FAIR** - Requires improvements before production deployment" >> $assessment_report
          else
            echo "🔴 **POOR** - Significant improvements required before production" >> $assessment_report
          fi
          
          # Set outputs
          echo "readiness-score=$readiness_percentage" >> $GITHUB_OUTPUT
          echo "critical-issues=$critical_issues" >> $GITHUB_OUTPUT

      - name: Upload operational readiness report
        uses: actions/upload-artifact@v4
        with:
          name: operational-readiness-report
          path: operational-readiness-report.md
          retention-days: 90

  performance-optimization-analysis:
    name: ⚡ Performance Optimization Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.assessment_type == 'full' || github.event.inputs.assessment_type == 'performance' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Repository performance analysis
        run: |
          echo "⚡ Analyzing repository performance characteristics..."
          
          perf_report="performance-analysis-report.md"
          echo "# ⚡ Performance Analysis Report" > $perf_report
          echo "Generated: $(date)" >> $perf_report
          echo "" >> $perf_report
          
          # Repository size analysis
          echo "## 📊 Repository Metrics" >> $perf_report
          echo "" >> $perf_report
          
          repo_size=$(du -sh . | cut -f1)
          file_count=$(find . -type f | wc -l)
          git_size=$(du -sh .git | cut -f1)
          
          echo "| Metric | Value |" >> $perf_report
          echo "|--------|-------|" >> $perf_report
          echo "| Repository Size | $repo_size |" >> $perf_report
          echo "| Total Files | $file_count |" >> $perf_report
          echo "| Git History Size | $git_size |" >> $perf_report
          echo "" >> $perf_report
          
          # Large files analysis
          echo "## 📁 Large Files Analysis" >> $perf_report
          echo "" >> $perf_report
          
          large_files=$(find . -type f -size +1M -not -path "./.git/*" | head -10)
          if [ -n "$large_files" ]; then
            echo "**Files larger than 1MB:**" >> $perf_report
            echo "" >> $perf_report
            echo "| File | Size |" >> $perf_report
            echo "|------|------|" >> $perf_report
            find . -type f -size +1M -not -path "./.git/*" -exec ls -lh {} \; | head -10 | \
              awk '{print "| " $9 " | " $5 " |"}' >> $perf_report
          else
            echo "✅ No large files detected (>1MB)" >> $perf_report
          fi
          echo "" >> $perf_report
          
          # Git performance analysis
          echo "## 🔍 Git Performance Analysis" >> $perf_report
          echo "" >> $perf_report
          
          commit_count=$(git rev-list --all --count)
          branch_count=$(git branch -r | wc -l)
          
          echo "| Git Metric | Value |" >> $perf_report
          echo "|------------|-------|" >> $perf_report
          echo "| Total Commits | $commit_count |" >> $perf_report
          echo "| Remote Branches | $branch_count |" >> $perf_report
          echo "" >> $perf_report
          
          # Workflow performance analysis
          echo "## 🔄 Workflow Performance Analysis" >> $perf_report
          echo "" >> $perf_report
          
          if [ -d ".github/workflows" ]; then
            workflow_count=$(find .github/workflows -name "*.yml" -o -name "*.yaml" | wc -l)
            echo "**Workflow Count:** $workflow_count" >> $perf_report
            echo "" >> $perf_report
            
            # Analyze workflow complexity
            echo "**Workflow Complexity Analysis:**" >> $perf_report
            echo "" >> $perf_report
            find .github/workflows -name "*.yml" -o -name "*.yaml" | while read workflow; do
              job_count=$(grep -c "^[[:space:]]*[a-zA-Z_-]*:" "$workflow" | head -1)
              step_count=$(grep -c "^[[:space:]]*- name:" "$workflow")
              echo "- $(basename "$workflow"): $job_count jobs, $step_count steps" >> $perf_report
            done
          else
            echo "❌ No workflows found" >> $perf_report
          fi
          echo "" >> $perf_report
          
          # Performance recommendations
          echo "## 🎯 Performance Recommendations" >> $perf_report
          echo "" >> $perf_report
          
          recommendations=()
          
          if [ $(echo $repo_size | sed 's/[^0-9]*//g') -gt 100 ]; then
            recommendations+=("Consider using Git LFS for large files")
          fi
          
          if [ $file_count -gt 10000 ]; then
            recommendations+=("Repository has many files - consider archiving old code")
          fi
          
          if [ $branch_count -gt 20 ]; then
            recommendations+=("Clean up old remote branches to improve performance")
          fi
          
          if [ ${#recommendations[@]} -eq 0 ]; then
            echo "✅ No performance issues detected" >> $perf_report
          else
            for rec in "${recommendations[@]}"; do
              echo "- $rec" >> $perf_report
            done
          fi

      - name: CI/CD performance analysis
        run: |
          echo "🔄 Analyzing CI/CD performance..."
          
          cicd_perf_report="cicd-performance-report.md"
          echo "# 🔄 CI/CD Performance Analysis" > $cicd_perf_report
          echo "Generated: $(date)" >> $cicd_perf_report
          echo "" >> $cicd_perf_report
          
          if [ -d ".github/workflows" ]; then
            echo "## Workflow Optimization Opportunities" >> $cicd_perf_report
            echo "" >> $cicd_perf_report
            
            # Check for caching opportunities
            cache_usage=$(find .github/workflows -name "*.yml" | xargs grep -l "cache" | wc -l)
            total_workflows=$(find .github/workflows -name "*.yml" | wc -l)
            
            echo "**Caching Analysis:**" >> $cicd_perf_report
            echo "- Workflows using caching: $cache_usage/$total_workflows" >> $cicd_perf_report
            
            if [ $cache_usage -lt $total_workflows ]; then
              echo "- ⚠️ Consider adding caching to improve build times" >> $cicd_perf_report
            else
              echo "- ✅ Good caching coverage" >> $cicd_perf_report
            fi
            echo "" >> $cicd_perf_report
            
            # Check for parallel job opportunities
            echo "**Parallelization Analysis:**" >> $cicd_perf_report
            find .github/workflows -name "*.yml" | while read workflow; do
              job_count=$(grep -c "^[[:space:]]*[a-zA-Z_-]*:" "$workflow")
              needs_count=$(grep -c "needs:" "$workflow")
              echo "- $(basename "$workflow"): $job_count jobs, $needs_count dependencies" >> $cicd_perf_report
            done
            echo "" >> $cicd_perf_report
            
            # Check for matrix strategies
            matrix_usage=$(find .github/workflows -name "*.yml" | xargs grep -l "matrix:" | wc -l)
            echo "**Matrix Strategy Usage:**" >> $cicd_perf_report
            echo "- Workflows using matrix: $matrix_usage/$total_workflows" >> $cicd_perf_report
            
            if [ $matrix_usage -eq 0 ]; then
              echo "- 💡 Consider using matrix strategies for testing multiple configurations" >> $cicd_perf_report
            fi
          fi

      - name: Upload performance analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis-reports
          path: |
            performance-analysis-report.md
            cicd-performance-report.md
          retention-days: 90

  cost-optimization-analysis:
    name: 💰 Cost Optimization Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.assessment_type == 'full' || github.event.inputs.assessment_type == 'cost-optimization' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GitHub Actions cost analysis
        run: |
          echo "💰 Analyzing GitHub Actions cost optimization opportunities..."
          
          cost_report="cost-optimization-report.md"
          echo "# 💰 Cost Optimization Analysis" > $cost_report
          echo "Generated: $(date)" >> $cost_report
          echo "" >> $cost_report
          
          if [ -d ".github/workflows" ]; then
            echo "## GitHub Actions Cost Analysis" >> $cost_report
            echo "" >> $cost_report
            
            # Analyze runner usage
            ubuntu_usage=$(find .github/workflows -name "*.yml" | xargs grep -c "ubuntu-latest" | awk -F: '{sum+=$2} END {print sum}')
            windows_usage=$(find .github/workflows -name "*.yml" | xargs grep -c "windows-latest" | awk -F: '{sum+=$2} END {print sum}')
            macos_usage=$(find .github/workflows -name "*.yml" | xargs grep -c "macos-latest" | awk -F: '{sum+=$2} END {print sum}')
            
            echo "**Runner Usage Analysis:**" >> $cost_report
            echo "- Ubuntu runners: $ubuntu_usage jobs" >> $cost_report
            echo "- Windows runners: $windows_usage jobs" >> $cost_report
            echo "- macOS runners: $macos_usage jobs" >> $cost_report
            echo "" >> $cost_report
            
            # Cost optimization recommendations
            echo "## Cost Optimization Recommendations" >> $cost_report
            echo "" >> $cost_report
            
            recommendations=()
            
            if [ $windows_usage -gt 0 ] || [ $macos_usage -gt 0 ]; then
              recommendations+=("Consider if Windows/macOS runners are necessary (10x more expensive than Ubuntu)")
            fi
            
            # Check for long-running workflows
            timeout_usage=$(find .github/workflows -name "*.yml" | xargs grep -c "timeout-minutes" | awk -F: '{sum+=$2} END {print sum}')
            if [ $timeout_usage -eq 0 ]; then
              recommendations+=("Add timeout-minutes to prevent runaway workflows")
            fi
            
            # Check for conditional execution
            if_usage=$(find .github/workflows -name "*.yml" | xargs grep -c "if:" | awk -F: '{sum+=$2} END {print sum}')
            if [ $if_usage -eq 0 ]; then
              recommendations+=("Use conditional execution to skip unnecessary jobs")
            fi
            
            # Check for caching
            cache_usage=$(find .github/workflows -name "*.yml" | xargs grep -c "cache" | awk -F: '{sum+=$2} END {print sum}')
            if [ $cache_usage -eq 0 ]; then
              recommendations+=("Implement caching to reduce build times and costs")
            fi
            
            if [ ${#recommendations[@]} -eq 0 ]; then
              echo "✅ No obvious cost optimization opportunities found" >> $cost_report
            else
              for rec in "${recommendations[@]}"; do
                echo "- $rec" >> $cost_report
              done
            fi
            echo "" >> $cost_report
            
            # Estimated monthly cost (rough calculation)
            total_jobs=$((ubuntu_usage + windows_usage + macos_usage))
            estimated_ubuntu_minutes=$((ubuntu_usage * 10))  # Assume 10 min per job
            estimated_windows_minutes=$((windows_usage * 15))  # Assume 15 min per job
            estimated_macos_minutes=$((macos_usage * 15))  # Assume 15 min per job
            
            echo "## Estimated Monthly Usage (Rough)" >> $cost_report
            echo "" >> $cost_report
            echo "| Runner Type | Jobs | Est. Minutes | Cost Factor |" >> $cost_report
            echo "|-------------|------|--------------|-------------|" >> $cost_report
            echo "| Ubuntu | $ubuntu_usage | $estimated_ubuntu_minutes | 1x |" >> $cost_report
            echo "| Windows | $windows_usage | $estimated_windows_minutes | 2x |" >> $cost_report
            echo "| macOS | $macos_usage | $estimated_macos_minutes | 10x |" >> $cost_report
            echo "" >> $cost_report
            echo "*Note: This is a rough estimate based on workflow analysis. Actual usage may vary.*" >> $cost_report
          fi

      - name: Infrastructure cost analysis
        run: |
          echo "🏗️ Analyzing infrastructure cost optimization..."
          
          # Check for Terraform/infrastructure files
          if find . -name "*.tf" -o -name "terraform" -type d | grep -q .; then
            echo "" >> cost-optimization-report.md
            echo "## Infrastructure Cost Analysis" >> cost-optimization-report.md
            echo "" >> cost-optimization-report.md
            
            # Look for expensive resources
            expensive_resources=()
            
            if find . -name "*.tf" | xargs grep -l "instance_type.*large\|instance_type.*xlarge" | grep -q .; then
              expensive_resources+=("Large EC2 instances detected - consider rightsizing")
            fi
            
            if find . -name "*.tf" | xargs grep -l "multi_az.*true" | grep -q .; then
              expensive_resources+=("Multi-AZ deployments detected - ensure they're necessary")
            fi
            
            if find . -name "*.tf" | xargs grep -l "storage_type.*io1\|storage_type.*gp3" | grep -q .; then
              expensive_resources+=("Premium storage detected - verify requirements")
            fi
            
            if [ ${#expensive_resources[@]} -eq 0 ]; then
              echo "✅ No obvious expensive infrastructure patterns detected" >> cost-optimization-report.md
            else
              echo "**Infrastructure Cost Considerations:**" >> cost-optimization-report.md
              for resource in "${expensive_resources[@]}"; do
                echo "- $resource" >> cost-optimization-report.md
              done
            fi
          fi

      - name: Upload cost optimization report
        uses: actions/upload-artifact@v4
        with:
          name: cost-optimization-report
          path: cost-optimization-report.md
          retention-days: 90

  documentation-quality-assessment:
    name: 📚 Documentation Quality Assessment
    runs-on: ubuntu-latest
    if: github.event.inputs.assessment_type == 'full' || github.event.inputs.assessment_type == 'documentation' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Documentation analysis
        run: |
          echo "📚 Analyzing documentation quality..."
          
          doc_report="documentation-quality-report.md"
          echo "# 📚 Documentation Quality Assessment" > $doc_report
          echo "Generated: $(date)" >> $doc_report
          echo "" >> $doc_report
          
          # Documentation coverage analysis
          echo "## Documentation Coverage" >> $doc_report
          echo "" >> $doc_report
          
          total_files=$(find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.java" | wc -l)
          documented_files=0
          
          if [ $total_files -gt 0 ]; then
            # Count files with documentation comments
            documented_files=$(find . -name "*.py" -exec grep -l "\"\"\"" {} \; | wc -l)
            documented_files=$((documented_files + $(find . -name "*.js" -o -name "*.ts" -exec grep -l "/\*\*" {} \; | wc -l)))
            documented_files=$((documented_files + $(find . -name "*.go" -exec grep -l "//" {} \; | wc -l)))
            
            coverage_percentage=$((documented_files * 100 / total_files))
            
            echo "| Metric | Value |" >> $doc_report
            echo "|--------|-------|" >> $doc_report
            echo "| Total Code Files | $total_files |" >> $doc_report
            echo "| Documented Files | $documented_files |" >> $doc_report
            echo "| Coverage | ${coverage_percentage}% |" >> $doc_report
          else
            echo "No code files found for documentation analysis." >> $doc_report
          fi
          echo "" >> $doc_report
          
          # Required documentation check
          echo "## Required Documentation Check" >> $doc_report
          echo "" >> $doc_report
          
          required_docs=(
            "README.md:Project overview and setup instructions"
            "CONTRIBUTING.md:Contribution guidelines"
            "SECURITY.md:Security policy and reporting"
            "CODE_OF_CONDUCT.md:Community guidelines"
            "LICENSE:License information"
            "CHANGELOG.md:Version history"
            "API.md:API documentation"
            "DEPLOYMENT.md:Deployment instructions"
          )
          
          echo "| Document | Status | Purpose |" >> $doc_report
          echo "|----------|--------|---------|" >> $doc_report
          
          for doc_info in "${required_docs[@]}"; do
            doc_name=$(echo $doc_info | cut -d: -f1)
            doc_purpose=$(echo $doc_info | cut -d: -f2)
            
            if [ -f "$doc_name" ]; then
              echo "| $doc_name | ✅ Present | $doc_purpose |" >> $doc_report
            else
              echo "| $doc_name | ❌ Missing | $doc_purpose |" >> $doc_report
            fi
          done
          echo "" >> $doc_report
          
          # Documentation quality metrics
          echo "## Documentation Quality Metrics" >> $doc_report
          echo "" >> $doc_report
          
          if [ -f "README.md" ]; then
            readme_lines=$(wc -l < README.md)
            readme_words=$(wc -w < README.md)
            
            echo "**README.md Analysis:**" >> $doc_report
            echo "- Lines: $readme_lines" >> $doc_report
            echo "- Words: $readme_words" >> $doc_report
            
            # Check for common README sections
            sections=("Installation" "Usage" "Contributing" "License" "Support")
            echo "- Sections present:" >> $doc_report
            for section in "${sections[@]}"; do
              if grep -i "$section" README.md > /dev/null; then
                echo "  - ✅ $section" >> $doc_report
              else
                echo "  - ❌ $section" >> $doc_report
              fi
            done
          fi
          echo "" >> $doc_report
          
          # Documentation recommendations
          echo "## Recommendations" >> $doc_report
          echo "" >> $doc_report
          
          recommendations=()
          
          if [ ! -f "README.md" ]; then
            recommendations+=("Create a comprehensive README.md file")
          fi
          
          if [ ! -f "CONTRIBUTING.md" ]; then
            recommendations+=("Add contribution guidelines")
          fi
          
          if [ ! -f "API.md" ] && find . -name "*.py" -o -name "*.js" -o -name "*.ts" | grep -q .; then
            recommendations+=("Consider adding API documentation")
          fi
          
          if [ $total_files -gt 0 ] && [ $coverage_percentage -lt 50 ]; then
            recommendations+=("Improve code documentation coverage (currently ${coverage_percentage}%)")
          fi
          
          if [ ${#recommendations[@]} -eq 0 ]; then
            echo "✅ Documentation quality is good!" >> $doc_report
          else
            for rec in "${recommendations[@]}"; do
              echo "- $rec" >> $doc_report
            done
          fi

      - name: Upload documentation quality report
        uses: actions/upload-artifact@v4
        with:
          name: documentation-quality-report
          path: documentation-quality-report.md
          retention-days: 90

  operational-excellence-dashboard:
    name: 📊 Operational Excellence Dashboard
    runs-on: ubuntu-latest
    needs: [operational-readiness-assessment, performance-optimization-analysis, cost-optimization-analysis, documentation-quality-assessment]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all assessment results
        uses: actions/download-artifact@v4
        with:
          path: assessment-results
        continue-on-error: true

      - name: Generate operational excellence dashboard
        run: |
          echo "📊 Generating operational excellence dashboard..."
          
          dashboard="operational-excellence-dashboard.md"
          echo "# 🎯 Operational Excellence Dashboard" > $dashboard
          echo "Generated: $(date)" >> $dashboard
          echo "" >> $dashboard
          
          # Executive Summary
          echo "## 📈 Executive Summary" >> $dashboard
          echo "" >> $dashboard
          
          readiness_score="${{ needs.operational-readiness-assessment.outputs.readiness-score }}"
          critical_issues="${{ needs.operational-readiness-assessment.outputs.critical-issues }}"
          
          if [ -n "$readiness_score" ]; then
            echo "**Overall Operational Readiness: ${readiness_score}%**" >> $dashboard
            echo "**Critical Issues: ${critical_issues}**" >> $dashboard
          else
            echo "**Operational Readiness: Assessment in progress**" >> $dashboard
          fi
          echo "" >> $dashboard
          
          # Assessment Status
          echo "## 🔍 Assessment Status" >> $dashboard
          echo "" >> $dashboard
          echo "| Assessment | Status | Last Run |" >> $dashboard
          echo "|------------|--------|----------|" >> $dashboard
          echo "| Operational Readiness | ${{ needs.operational-readiness-assessment.result == 'success' && '✅ Completed' || '❌ Failed' }} | $(date) |" >> $dashboard
          echo "| Performance Analysis | ${{ needs.performance-optimization-analysis.result == 'success' && '✅ Completed' || '❌ Failed' }} | $(date) |" >> $dashboard
          echo "| Cost Optimization | ${{ needs.cost-optimization-analysis.result == 'success' && '✅ Completed' || '❌ Failed' }} | $(date) |" >> $dashboard
          echo "| Documentation Quality | ${{ needs.documentation-quality-assessment.result == 'success' && '✅ Completed' || '❌ Failed' }} | $(date) |" >> $dashboard
          echo "" >> $dashboard
          
          # Key Metrics
          echo "## 📊 Key Operational Metrics" >> $dashboard
          echo "" >> $dashboard
          
          # Repository health metrics
          commit_count=$(git rev-list --all --count)
          contributor_count=$(git log --format='%ae' | sort -u | wc -l)
          last_commit_date=$(git log -1 --format=%cd --date=short)
          
          echo "| Metric | Value |" >> $dashboard
          echo "|--------|-------|" >> $dashboard
          echo "| Total Commits | $commit_count |" >> $dashboard
          echo "| Contributors | $contributor_count |" >> $dashboard
          echo "| Last Activity | $last_commit_date |" >> $dashboard
          echo "| Repository Size | $(du -sh . | cut -f1) |" >> $dashboard
          echo "" >> $dashboard
          
          # Operational Excellence Pillars
          echo "## 🏛️ Operational Excellence Pillars" >> $dashboard
          echo "" >> $dashboard
          
          pillars=(
            "🎯 Operational Readiness:Processes and procedures for reliable operations"
            "⚡ Performance:System performance and optimization"
            "💰 Cost Optimization:Resource efficiency and cost management"
            "📚 Documentation:Knowledge management and documentation"
            "🔒 Security:Security posture and compliance"
            "🔄 Automation:CI/CD and operational automation"
          )
          
          for pillar in "${pillars[@]}"; do
            pillar_name=$(echo $pillar | cut -d: -f1)
            pillar_desc=$(echo $pillar | cut -d: -f2)
            echo "### $pillar_name" >> $dashboard
            echo "$pillar_desc" >> $dashboard
            echo "" >> $dashboard
          done
          
          # Action Items
          echo "## 🎯 Recommended Actions" >> $dashboard
          echo "" >> $dashboard
          
          if [ "$critical_issues" -gt 0 ]; then
            echo "### 🚨 Critical Actions Required" >> $dashboard
            echo "- Address $critical_issues critical operational issues" >> $dashboard
            echo "- Review operational readiness assessment results" >> $dashboard
            echo "" >> $dashboard
          fi
          
          echo "### 📈 Continuous Improvement" >> $dashboard
          echo "- Review assessment results monthly" >> $dashboard
          echo "- Update documentation regularly" >> $dashboard
          echo "- Monitor performance metrics" >> $dashboard
          echo "- Optimize costs based on usage patterns" >> $dashboard
          echo "- Enhance security posture continuously" >> $dashboard
          echo "" >> $dashboard
          
          # Next Steps
          echo "## 🚀 Next Steps" >> $dashboard
          echo "" >> $dashboard
          echo "1. **Review Assessment Reports**: Examine detailed findings in workflow artifacts" >> $dashboard
          echo "2. **Prioritize Improvements**: Focus on critical issues first" >> $dashboard
          echo "3. **Implement Changes**: Make necessary improvements to systems and processes" >> $dashboard
          echo "4. **Monitor Progress**: Track improvements over time" >> $dashboard
          echo "5. **Schedule Regular Reviews**: Maintain operational excellence through regular assessments" >> $dashboard

      - name: Upload operational excellence dashboard
        uses: actions/upload-artifact@v4
        with:
          name: operational-excellence-dashboard
          path: operational-excellence-dashboard.md
          retention-days: 90

      - name: Create workflow summary
        run: |
          echo "## 🎯 Operational Excellence Assessment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Assessment Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ needs.operational-readiness-assessment.outputs.readiness-score }}" ]; then
            echo "**Operational Readiness Score:** ${{ needs.operational-readiness-assessment.outputs.readiness-score }}%" >> $GITHUB_STEP_SUMMARY
            echo "**Critical Issues:** ${{ needs.operational-readiness-assessment.outputs.critical-issues }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Assessment | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Operational Readiness | ${{ needs.operational-readiness-assessment.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Analysis | ${{ needs.performance-optimization-analysis.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cost Optimization | ${{ needs.cost-optimization-analysis.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation Quality | ${{ needs.documentation-quality-assessment.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Detailed Reports:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
