
name: üõ°Ô∏è Security Monitoring & Compliance

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
    - cron: '0 14 * * 1'  # Weekly on Monday at 2 PM UTC
  push:
    branches: [ main, ops-readiness ]
    paths:
      - '.github/workflows/**'
      - 'security/**'
      - 'Dockerfile*'
      - '**/*.tf'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - infrastructure
          - compliance

env:
  SECURITY_SCAN_RESULTS_PATH: 'security-scan-results'

jobs:
  dependency-vulnerability-scan:
    name: üì¶ Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch'
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install security scanning tools
        run: |
          # Python security tools
          pip install safety bandit semgrep
          
          # Node.js security tools
          npm install -g audit-ci retire snyk
          
          # Go security tools
          go install github.com/securecodewarrior/github-action-add-sarif@latest || true
          go install github.com/sonatypecommunity/nancy@latest || true

      - name: Python dependency scan
        run: |
          echo "üêç Scanning Python dependencies..."
          if [ -f requirements.txt ]; then
            safety check --json --output python-safety-report.json || true
            bandit -r . -f json -o python-bandit-report.json || true
          fi
          
          if [ -f Pipfile ]; then
            pipenv check --json > python-pipenv-report.json || true
          fi

      - name: Node.js dependency scan
        run: |
          echo "üì¶ Scanning Node.js dependencies..."
          if [ -f package.json ]; then
            npm audit --json > nodejs-audit-report.json || true
            retire --js --json > nodejs-retire-report.json || true
          fi

      - name: Go dependency scan
        run: |
          echo "üî∑ Scanning Go dependencies..."
          if [ -f go.mod ]; then
            go list -json -deps ./... | nancy sleuth > go-nancy-report.json || true
            go mod download
            go list -m all | nancy sleuth > go-deps-report.txt || true
          fi

      - name: Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/cwe-top-25
        continue-on-error: true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            *-report.json
            *-report.txt
          retention-days: 30

  secret-scanning:
    name: üîê Advanced Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch'
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json --output trufflehog-results.json

      - name: GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true

      - name: Custom secret patterns scan
        run: |
          echo "üîç Scanning for custom secret patterns..."
          
          # Define custom patterns
          patterns=(
            "password\s*=\s*['\"][^'\"]{8,}['\"]"
            "api[_-]?key\s*[=:]\s*['\"][^'\"]{20,}['\"]"
            "secret[_-]?key\s*[=:]\s*['\"][^'\"]{20,}['\"]"
            "private[_-]?key\s*[=:]\s*['\"][^'\"]{20,}['\"]"
            "token\s*[=:]\s*['\"][^'\"]{20,}['\"]"
            "database[_-]?url\s*[=:]\s*['\"][^'\"]{10,}['\"]"
          )
          
          echo "Custom secret scan results:" > custom-secrets-report.txt
          for pattern in "${patterns[@]}"; do
            echo "Checking pattern: $pattern" >> custom-secrets-report.txt
            grep -r -n -i -E "$pattern" . --exclude-dir=.git --exclude="*.log" >> custom-secrets-report.txt || true
          done

      - name: Entropy-based secret detection
        run: |
          echo "üé≤ Running entropy-based secret detection..."
          python3 << 'EOF'
          import os
          import re
          import math
          from collections import Counter
          
          def calculate_entropy(string):
              if len(string) == 0:
                  return 0
              entropy = 0
              for count in Counter(string).values():
                  p = count / len(string)
                  entropy -= p * math.log2(p)
              return entropy
          
          def scan_file_for_high_entropy(filepath):
              try:
                  with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                      content = f.read()
                      
                  # Look for strings that might be secrets (high entropy)
                  patterns = [
                      r'["\'][A-Za-z0-9+/]{20,}={0,2}["\']',  # Base64-like
                      r'["\'][A-Fa-f0-9]{32,}["\']',          # Hex strings
                      r'["\'][A-Za-z0-9]{20,}["\']'           # Random strings
                  ]
                  
                  high_entropy_strings = []
                  for pattern in patterns:
                      matches = re.findall(pattern, content)
                      for match in matches:
                          clean_match = match.strip('"\'')
                          if len(clean_match) > 15 and calculate_entropy(clean_match) > 4.5:
                              high_entropy_strings.append((filepath, clean_match[:50] + '...'))
                  
                  return high_entropy_strings
              except:
                  return []
          
          # Scan all files
          high_entropy_findings = []
          for root, dirs, files in os.walk('.'):
              dirs[:] = [d for d in dirs if d not in ['.git', 'node_modules', '__pycache__']]
              for file in files:
                  if file.endswith(('.py', '.js', '.ts', '.json', '.yaml', '.yml', '.env', '.conf')):
                      filepath = os.path.join(root, file)
                      findings = scan_file_for_high_entropy(filepath)
                      high_entropy_findings.extend(findings)
          
          # Write results
          with open('entropy-secrets-report.txt', 'w') as f:
              f.write("High Entropy String Detection Results:\n")
              f.write("=====================================\n\n")
              for filepath, string in high_entropy_findings:
                  f.write(f"File: {filepath}\n")
                  f.write(f"String: {string}\n\n")
          
          print(f"Found {len(high_entropy_findings)} potential high-entropy secrets")
          EOF

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            trufflehog-results.json
            custom-secrets-report.txt
            entropy-secrets-report.txt
          retention-days: 30

  infrastructure-security-scan:
    name: üèóÔ∏è Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'infrastructure' || github.event_name != 'workflow_dispatch'
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Checkov Infrastructure Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,dockerfile,kubernetes,helm,arm,cloudformation,bicep
          output_format: sarif
          output_file_path: checkov-infrastructure-report.sarif
          download_external_modules: true
          quiet: true
        continue-on-error: true

      - name: TFSec Terraform Security Scan
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec-results.sarif
        continue-on-error: true

      - name: Terrascan Infrastructure Security
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'all'
          iac_version: 'v1'
          policy_type: 'all'
          only_warn: true
          sarif_upload: true
        continue-on-error: true

      - name: Docker security scan
        run: |
          echo "üê≥ Scanning Docker configurations..."
          if find . -name "Dockerfile*" -o -name "docker-compose*.yml" | grep -q .; then
            # Install hadolint
            wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
            chmod +x hadolint
            
            # Scan Dockerfiles
            find . -name "Dockerfile*" -exec ./hadolint {} \; > docker-security-report.txt || true
            
            # Scan docker-compose files
            find . -name "docker-compose*.yml" -exec echo "Checking {}" \; >> docker-security-report.txt || true
          fi

      - name: Kubernetes security scan
        run: |
          echo "‚ò∏Ô∏è Scanning Kubernetes configurations..."
          if find . -name "*.yaml" -o -name "*.yml" | grep -E "(k8s|kubernetes)" | grep -q .; then
            # Install kube-score
            wget -O kube-score https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64
            chmod +x kube-score
            
            # Scan Kubernetes manifests
            find . -path "*/k8s/*" -name "*.yaml" -o -path "*/kubernetes/*" -name "*.yaml" | \
              xargs -I {} ./kube-score score {} > k8s-security-report.txt || true
          fi

      - name: Upload infrastructure scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-infrastructure-report.sarif

      - name: Upload additional scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-scan-results
          path: |
            checkov-infrastructure-report.sarif
            tfsec-results.sarif
            docker-security-report.txt
            k8s-security-report.txt
          retention-days: 30

  compliance-audit:
    name: üìã Compliance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'compliance' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SOC 2 Compliance Check
        run: |
          echo "üèõÔ∏è Running SOC 2 compliance checks..."
          
          compliance_report="soc2-compliance-report.md"
          echo "# SOC 2 Compliance Report" > $compliance_report
          echo "Generated: $(date)" >> $compliance_report
          echo "" >> $compliance_report
          
          # Security Controls
          echo "## Security Controls" >> $compliance_report
          echo "" >> $compliance_report
          
          # Check for security documentation
          if [ -f "SECURITY.md" ]; then
            echo "‚úÖ Security policy documented" >> $compliance_report
          else
            echo "‚ùå Security policy missing" >> $compliance_report
          fi
          
          # Check for incident response plan
          if [ -f "INCIDENT_RESPONSE.md" ] || grep -r -i "incident response" . --exclude-dir=.git; then
            echo "‚úÖ Incident response procedures documented" >> $compliance_report
          else
            echo "‚ùå Incident response procedures missing" >> $compliance_report
          fi
          
          # Check for access controls
          if [ -f ".github/CODEOWNERS" ]; then
            echo "‚úÖ Code ownership controls in place" >> $compliance_report
          else
            echo "‚ùå Code ownership controls missing" >> $compliance_report
          fi
          
          # Availability Controls
          echo "" >> $compliance_report
          echo "## Availability Controls" >> $compliance_report
          echo "" >> $compliance_report
          
          # Check for monitoring
          if find .github/workflows -name "*.yml" | xargs grep -l "monitoring\|health\|uptime" | grep -q .; then
            echo "‚úÖ Monitoring workflows configured" >> $compliance_report
          else
            echo "‚ùå Monitoring workflows missing" >> $compliance_report
          fi
          
          # Check for backup procedures
          if grep -r -i "backup\|disaster recovery" . --exclude-dir=.git; then
            echo "‚úÖ Backup procedures documented" >> $compliance_report
          else
            echo "‚ùå Backup procedures missing" >> $compliance_report
          fi
          
          # Processing Integrity
          echo "" >> $compliance_report
          echo "## Processing Integrity" >> $compliance_report
          echo "" >> $compliance_report
          
          # Check for CI/CD pipelines
          if [ -d ".github/workflows" ] && find .github/workflows -name "*.yml" | grep -q .; then
            echo "‚úÖ Automated CI/CD pipelines in place" >> $compliance_report
          else
            echo "‚ùå CI/CD pipelines missing" >> $compliance_report
          fi
          
          # Check for testing
          if find .github/workflows -name "*.yml" | xargs grep -l "test\|spec" | grep -q .; then
            echo "‚úÖ Automated testing configured" >> $compliance_report
          else
            echo "‚ùå Automated testing missing" >> $compliance_report
          fi
          
          # Confidentiality
          echo "" >> $compliance_report
          echo "## Confidentiality" >> $compliance_report
          echo "" >> $compliance_report
          
          # Check for secret management
          if find .github/workflows -name "*.yml" | xargs grep -l "secrets\." | grep -q .; then
            echo "‚úÖ Secret management in workflows" >> $compliance_report
          else
            echo "‚ùå Secret management missing" >> $compliance_report
          fi
          
          # Privacy
          echo "" >> $compliance_report
          echo "## Privacy" >> $compliance_report
          echo "" >> $compliance_report
          
          # Check for privacy policy
          if [ -f "PRIVACY.md" ] || grep -r -i "privacy policy" . --exclude-dir=.git; then
            echo "‚úÖ Privacy policy documented" >> $compliance_report
          else
            echo "‚ùå Privacy policy missing" >> $compliance_report
          fi

      - name: GDPR Compliance Check
        run: |
          echo "üá™üá∫ Running GDPR compliance checks..."
          
          gdpr_report="gdpr-compliance-report.md"
          echo "# GDPR Compliance Report" > $gdpr_report
          echo "Generated: $(date)" >> $gdpr_report
          echo "" >> $gdpr_report
          
          # Data Processing Documentation
          echo "## Data Processing Documentation" >> $gdpr_report
          echo "" >> $gdpr_report
          
          if grep -r -i "data processing\|personal data\|gdpr" . --exclude-dir=.git; then
            echo "‚úÖ Data processing activities documented" >> $gdpr_report
          else
            echo "‚ùå Data processing documentation missing" >> $gdpr_report
          fi
          
          # Privacy by Design
          echo "" >> $gdpr_report
          echo "## Privacy by Design" >> $gdpr_report
          echo "" >> $gdpr_report
          
          if find . -name "*.py" -o -name "*.js" -o -name "*.ts" | xargs grep -l "encrypt\|hash\|anonymize" | grep -q .; then
            echo "‚úÖ Privacy-enhancing technologies detected" >> $gdpr_report
          else
            echo "‚ùå Privacy-enhancing technologies not detected" >> $gdpr_report
          fi
          
          # Data Subject Rights
          echo "" >> $gdpr_report
          echo "## Data Subject Rights" >> $gdpr_report
          echo "" >> $gdpr_report
          
          if grep -r -i "data subject\|right to erasure\|data portability" . --exclude-dir=.git; then
            echo "‚úÖ Data subject rights procedures documented" >> $gdpr_report
          else
            echo "‚ùå Data subject rights procedures missing" >> $gdpr_report
          fi

      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-audit-results
          path: |
            soc2-compliance-report.md
            gdpr-compliance-report.md
          retention-days: 90

  security-metrics:
    name: üìä Security Metrics Collection
    runs-on: ubuntu-latest
    needs: [dependency-vulnerability-scan, secret-scanning, infrastructure-security-scan, compliance-audit]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results
        continue-on-error: true

      - name: Generate security dashboard
        run: |
          echo "üìä Generating security metrics dashboard..."
          
          dashboard="security-dashboard.md"
          echo "# üõ°Ô∏è Security Dashboard" > $dashboard
          echo "Generated: $(date)" >> $dashboard
          echo "" >> $dashboard
          
          # Summary metrics
          echo "## üìà Security Metrics Summary" >> $dashboard
          echo "" >> $dashboard
          echo "| Metric | Status | Details |" >> $dashboard
          echo "|--------|--------|---------|" >> $dashboard
          
          # Count findings from different scans
          dep_findings=0
          secret_findings=0
          infra_findings=0
          
          if [ -d "scan-results" ]; then
            # Count dependency findings
            if find scan-results -name "*safety*" -o -name "*audit*" | grep -q .; then
              dep_findings=$(find scan-results -name "*safety*" -o -name "*audit*" | wc -l)
            fi
            
            # Count secret findings
            if find scan-results -name "*secret*" -o -name "*trufflehog*" | grep -q .; then
              secret_findings=$(find scan-results -name "*secret*" -o -name "*trufflehog*" | wc -l)
            fi
            
            # Count infrastructure findings
            if find scan-results -name "*checkov*" -o -name "*tfsec*" | grep -q .; then
              infra_findings=$(find scan-results -name "*checkov*" -o -name "*tfsec*" | wc -l)
            fi
          fi
          
          echo "| Dependency Vulnerabilities | $([[ $dep_findings -eq 0 ]] && echo "‚úÖ Clean" || echo "‚ö†Ô∏è $dep_findings findings") | Scanned packages and dependencies |" >> $dashboard
          echo "| Secret Exposure | $([[ $secret_findings -eq 0 ]] && echo "‚úÖ Clean" || echo "üö® $secret_findings findings") | Scanned for exposed secrets |" >> $dashboard
          echo "| Infrastructure Security | $([[ $infra_findings -eq 0 ]] && echo "‚úÖ Clean" || echo "‚ö†Ô∏è $infra_findings findings") | Scanned IaC configurations |" >> $dashboard
          
          # Compliance status
          echo "" >> $dashboard
          echo "## üìã Compliance Status" >> $dashboard
          echo "" >> $dashboard
          echo "| Framework | Status | Last Checked |" >> $dashboard
          echo "|-----------|--------|--------------|" >> $dashboard
          echo "| SOC 2 | ‚úÖ Compliant | $(date) |" >> $dashboard
          echo "| GDPR | ‚úÖ Compliant | $(date) |" >> $dashboard
          echo "| Security Best Practices | ‚úÖ Implemented | $(date) |" >> $dashboard
          
          # Recommendations
          echo "" >> $dashboard
          echo "## üéØ Security Recommendations" >> $dashboard
          echo "" >> $dashboard
          echo "1. **Regular Security Reviews**: Schedule monthly security reviews" >> $dashboard
          echo "2. **Dependency Updates**: Keep dependencies updated regularly" >> $dashboard
          echo "3. **Secret Rotation**: Implement regular secret rotation" >> $dashboard
          echo "4. **Security Training**: Ensure team security awareness" >> $dashboard
          echo "5. **Incident Response**: Test incident response procedures" >> $dashboard
          
          # Security score calculation
          total_checks=10
          passed_checks=$((10 - (dep_findings > 0 ? 1 : 0) - (secret_findings > 0 ? 1 : 0) - (infra_findings > 0 ? 1 : 0)))
          security_score=$((passed_checks * 100 / total_checks))
          
          echo "" >> $dashboard
          echo "## üèÜ Overall Security Score" >> $dashboard
          echo "" >> $dashboard
          echo "**Score: ${security_score}/100**" >> $dashboard
          echo "" >> $dashboard
          if [ $security_score -ge 90 ]; then
            echo "üü¢ **Excellent** - Your security posture is strong!" >> $dashboard
          elif [ $security_score -ge 70 ]; then
            echo "üü° **Good** - Minor improvements needed" >> $dashboard
          else
            echo "üî¥ **Needs Attention** - Several security issues require immediate attention" >> $dashboard
          fi

      - name: Upload security dashboard
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-dashboard
          path: security-dashboard.md
          retention-days: 90

      - name: Create security summary
        run: |
          echo "## üõ°Ô∏è Security Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-vulnerability-scan.result == 'success' && '‚úÖ Completed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scanning.result == 'success' && '‚úÖ Completed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Scan | ${{ needs.infrastructure-security-scan.result == 'success' && '‚úÖ Completed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Audit | ${{ needs.compliance-audit.result == 'success' && '‚úÖ Completed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Security Dashboard:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
