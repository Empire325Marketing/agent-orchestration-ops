
name: 🚀 Continuous Integration

on:
  push:
    branches: [ main, ops-readiness, develop ]
  pull_request:
    branches: [ main, ops-readiness ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
          queries: security-extended,security-and-quality

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🕵️ Secret Scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 GitLeaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🎨 Code Formatting Check (Black)
        run: black --check --diff .

      - name: 📋 Import Sorting Check (isort)
        run: isort --check-only --diff .

      - name: 🔍 Linting (Flake8)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🔒 Security Linting (Bandit)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: 🛡️ Dependency Security Check
        run: safety check --json --output safety-report.json || true

      - name: 🏷️ Type Checking (MyPy)
        run: mypy . --ignore-missing-imports || true

      - name: 📊 Upload Code Quality Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-quality-reports
          path: |
            bandit-report.json
            safety-report.json

  infrastructure-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Checkov IaC Scanner
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: 📤 Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: 🛡️ Terrascan IaC Security
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'all'
          policy_type: 'all'
          only_warn: true
          sarif_upload: true

  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'docker') || contains(github.event.head_commit.message, 'container')
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Scan Docker Images
        run: |
          if [ -f Dockerfile ]; then
            docker build -t temp-image .
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $PWD:/tmp aquasec/trivy image temp-image
          fi

  compliance-check:
    name: ⚖️ Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 GDPR Compliance Check
        run: |
          echo "🔍 Checking GDPR compliance..."
          # Check for data processing documentation
          if [ -f "PRIVACY.md" ] || [ -f "docs/privacy.md" ]; then
            echo "✅ Privacy documentation found"
          else
            echo "⚠️ Privacy documentation missing"
          fi

      - name: 🏢 SOC2 Compliance Check
        run: |
          echo "🔍 Checking SOC2 compliance..."
          # Check for security controls documentation
          if [ -f "SECURITY.md" ] || [ -f "docs/security.md" ]; then
            echo "✅ Security documentation found"
          else
            echo "⚠️ Security documentation missing"
          fi

      - name: 💳 PCI DSS Compliance Check
        run: |
          echo "🔍 Checking PCI DSS compliance..."
          # Check for payment data handling documentation
          if grep -r "payment\|credit\|card" . --exclude-dir=.git; then
            echo "⚠️ Payment-related code detected - ensure PCI DSS compliance"
          else
            echo "✅ No payment data handling detected"
          fi

  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
              ;;
            integration)
              pytest tests/integration/ -v
              ;;
            e2e)
              pytest tests/e2e/ -v
              ;;
          esac

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: matrix.test-type == 'unit'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Load Testing
        run: |
          echo "🚀 Running performance tests..."
          # Add your performance testing commands here
          echo "✅ Performance tests completed"

  build-artifacts:
    name: 🏗️ Build Artifacts
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-suite]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🏗️ Build Application
        run: |
          echo "🏗️ Building application..."
          # Add your build commands here
          mkdir -p dist
          echo "Build completed at $(date)" > dist/build-info.txt

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  notification:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-suite, build-artifacts]
    if: always()
    steps:
      - name: 📢 Notify Success
        if: needs.security-scan.result == 'success' && needs.code-quality.result == 'success' && needs.test-suite.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully!"
          echo "🚀 Ready for deployment"

      - name: 🚨 Notify Failure
        if: needs.security-scan.result == 'failure' || needs.code-quality.result == 'failure' || needs.test-suite.result == 'failure'
        run: |
          echo "❌ CI Pipeline failed!"
          echo "🔍 Please check the failed jobs and fix issues"
